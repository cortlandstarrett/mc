-- BP 7.1.6 content: Package syschar: 3 persistence-version: 7.1.6

INSERT INTO EP_PKG
	VALUES ("f2c7a380-21fe-4c0d-9f05-1bf86680e190",
	"00000000-0000-0000-0000-000000000000",
	"e1ca632b-b51d-48ee-b1a8-9539fcd49828",
	'ASL2MASL',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("8425ebfe-16db-40c0-aac2-e3e6d62adce8",
	112,
	"f2c7a380-21fe-4c0d-9f05-1bf86680e190",
	108,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	0,
	0,
	0,
	0,
	0,
	'',
	'stratus::load::ASL2MASL');
INSERT INTO DIM_DIA
	VALUES ("8425ebfe-16db-40c0-aac2-e3e6d62adce8",
	'',
	1.000000,
	0.000000,
	0.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_SYNC
	VALUES ("a2a9df06-e666-484b-8c5b-6cbb5c13d477",
	"00000000-0000-0000-0000-000000000000",
	'asl2masl',
	'',
	'::trace( i:1, s:"ASL2MASL" );
select many domains from instances of Domain;
for each domain in domains
T::set_output_directory( dir:"gen/masl/" + domain.name );
  select many services related by domain->DomainService[R5303]->Service[R5203];
  for each service in services
    ::trace( i:2, s:"domain service name is:  " + service.name + " filename is:  " + service.filename );
    s = ::service( service:service );
    if ( "" != service.filename )
      T::append( s:s );
      T::emit( file:service.filename );
    else
      ::trace( i:6, s:"WARNING - Empty filename detected for " + service.name + ".  Perhaps there is a duplicate." );
    end if;
  end for;
  select many services related by domain->DomainTerminator[R5304]->DomainTerminatorService[R5306]->Service[R5203];
  for each service in services
    ::trace( i:3, s:"terminator service name is:  " + service.name + " filename is:  " + service.filename );
    s = ::service( service:service );
    if ( "" != service.filename )
      T::append( s:s );
      T::emit( file:service.filename );
    else
      ::trace( i:7, s:"WARNING - Empty filename detected for " + service.name + ".  missing mark?" );
    end if;
  end for;
  select many services related by domain->ObjectDeclaration[R5805]->ObjectService[R5808]->Service[R5203];
  for each service in services
    ::trace( i:4, s:"object service name is:  " + service.name + " filename is:  " + service.filename );
    s = ::service( service:service );
    if ( "" != service.filename )
      T::append( s:s );
      T::emit( file:service.filename );
    else
      ::trace( i:8, s:"WARNING - Empty filename detected for " + service.name + "." );
    end if;
  end for;
  select many object_declarations related by domain->ObjectDeclaration[R5805];
  for each object_declaration in object_declarations
    select many states related by object_declaration->MaslState[R6105] where ( ( "" + selected.name ) != "Non_Existent" );
    for each state in states
      ::trace( i:5, s:"state name is:  " + state.name + " filename is:  " + state.filename );
      s = ::state_action( state:state );
      if ( "" != state.filename )
        T::append( s:s );
        T::emit( file:state.filename );
      else
        ::trace( i:9, s:"WARNING - Empty filename detected for " + state.name + "." );
      end if;
    end for;
  end for;
end for;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	1);
INSERT INTO PE_PE
	VALUES ("a2a9df06-e666-484b-8c5b-6cbb5c13d477",
	1,
	"f2c7a380-21fe-4c0d-9f05-1bf86680e190",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f6b1ef62-b790-4b97-9bbb-180281722d8f",
	"00000000-0000-0000-0000-000000000000",
	'statement',
	'',
	'// Process an input statement.  Then select the next one and process it recursively.
statement = param.statement;

s = ::statement_assign( statement:statement, d:param.d );
if ( "" == s )
s = ::statement_case( statement:statement, d:param.d );
if ( "" == s )
s = ::statement_comment( statement:statement, d:param.d );
if ( "" == s )
s = ::statement_delete( statement:statement, d:param.d );
if ( "" == s )
s = ::statement_exit( statement:statement, d:param.d );
if ( "" == s )
s = ::statement_generate( statement:statement, d:param.d );
if ( "" == s )
s = ::statement_if( statement:statement, d:param.d );
if ( "" == s )
s = ::statement_for( statement:statement, d:param.d );
if ( "" == s )
s = ::statement_link_unlink( statement:statement, d:param.d );
if ( "" == s )
s = ::statement_while( statement:statement, d:param.d );
if ( "" == s )
// Recognize descriptions.
if ( true ) and ( 0 <= STRING::indexof(haystack:statement.actions, needle:"//!") )
  s = statement.actions;
else
  s = "\n";
end if;
end if;
end if;
end if;
end if;
end if;
end if;
end if;
end if;
end if;
end if;

// Process next statement.
select one statement related by statement->MaslStatement[R5155.''precedes''];
if ( not_empty statement )
  s = s + ::statement( statement:statement, d:param.d );
end if;
return s;',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	0,
	2);
INSERT INTO S_SPARM
	VALUES ("b61a1505-6543-4876-b5ab-64a3f6b6fae5",
	"f6b1ef62-b790-4b97-9bbb-180281722d8f",
	'statement',
	"05890c89-f4eb-4163-9007-b5abcf03a719",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("05890c89-f4eb-4163-9007-b5abcf03a719",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Statement>',
	'',
	'',
	'../../../../../ooamasl/models/ooamasl/ooamasl/statement/statement.xtuml');
INSERT INTO S_SPARM
	VALUES ("3599be7b-d8e6-4923-b235-74895310f588",
	"f6b1ef62-b790-4b97-9bbb-180281722d8f",
	'd',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"b61a1505-6543-4876-b5ab-64a3f6b6fae5",
	'');
INSERT INTO PE_PE
	VALUES ("f6b1ef62-b790-4b97-9bbb-180281722d8f",
	1,
	"f2c7a380-21fe-4c0d-9f05-1bf86680e190",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f6bf0283-0ffc-48b2-a1b7-127d99e5fd39",
	"00000000-0000-0000-0000-000000000000",
	'locals',
	'',
	's = "";
code_block = param.code_block;
select many variables related by code_block->VariableDefinition[R5151];
for each variable in variables
  select one basic_type related by variable->BasicType[R5137];
  select one builtin_type related by basic_type->BuiltinType[R6205];
  if ( not_empty builtin_type )
    s = s + variable.name + " : " + builtin_type.name + ";\n";
  else
  select one user_defined_type related by basic_type->MaslUserDefinedType[R6205];
  if ( not_empty user_defined_type )
    s = s + variable.name + " : " + user_defined_type.name + ";\n";
  else
  select one object_declaration related by basic_type->InstanceType[R6205]->ObjectDeclaration[R6220];
  if ( not_empty object_declaration )
    s = s + variable.name + " : instance of " + object_declaration.name + ";\n";
  end if;
  end if;
  end if;
end for;
return s;',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	0,
	3);
INSERT INTO S_SPARM
	VALUES ("d2bcfa33-cc21-4f7d-b0d6-4506bf1c7b64",
	"f6bf0283-0ffc-48b2-a1b7-127d99e5fd39",
	'code_block',
	"a76746ea-c05f-42fd-bfbf-00a70b069bb6",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("a76746ea-c05f-42fd-bfbf-00a70b069bb6",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<CodeBlock>',
	'',
	'',
	'../../../../../ooamasl/models/ooamasl/ooamasl/statement/statement.xtuml');
INSERT INTO PE_PE
	VALUES ("f6bf0283-0ffc-48b2-a1b7-127d99e5fd39",
	1,
	"f2c7a380-21fe-4c0d-9f05-1bf86680e190",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b0664ce7-0d93-4ed8-a21b-f08bfd69161d",
	"00000000-0000-0000-0000-000000000000",
	'statement_for',
	'',
	'// Render for statement.
statement = param.statement;
s = "";
select one for_statement related by statement->ForStatement[R5135];
if ( not_empty for_statement )
  select one loopspec related by for_statement->LoopSpec[R5110];
  s = s + ::indent(d:param.d) + "for " + loopspec.loopVariable + " in ";
  select one set_expression related by loopspec->VariableElements[R5123]->MaslExpression[R5139];
  if ( not_empty set_expression )
    s = s + ::expression( expression:set_expression );
  end if;
  s = s + " loop\n";
  select one nested_statement related by for_statement->MaslStatement[R5153];
  if ( not_empty nested_statement )
    s = s + ::statement( statement:nested_statement, d:param.d+1 );
  end if;
  s = s + ::indent(d:param.d) + "end for;\n";
end if;
return s;',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	0,
	4);
INSERT INTO S_SPARM
	VALUES ("7ddaf81e-5988-4161-b613-c28141e244f7",
	"b0664ce7-0d93-4ed8-a21b-f08bfd69161d",
	'statement',
	"05890c89-f4eb-4163-9007-b5abcf03a719",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("1e4902a5-660f-48ac-8f2c-0d933069f85b",
	"b0664ce7-0d93-4ed8-a21b-f08bfd69161d",
	'd',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"7ddaf81e-5988-4161-b613-c28141e244f7",
	'');
INSERT INTO PE_PE
	VALUES ("b0664ce7-0d93-4ed8-a21b-f08bfd69161d",
	1,
	"f2c7a380-21fe-4c0d-9f05-1bf86680e190",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("e9a9f3f9-5540-461a-b79a-b936538cb8a8",
	"00000000-0000-0000-0000-000000000000",
	'indent',
	'',
	'd = param.d;
// Establish indention.
indent = "";
while ( d > 0 )
  indent = indent + "   ";
  d = d - 1;
end while;
return indent;',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	0,
	5);
INSERT INTO S_SPARM
	VALUES ("b5d439ec-48f1-4e85-bd31-48fea4047add",
	"e9a9f3f9-5540-461a-b79a-b936538cb8a8",
	'd',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("e9a9f3f9-5540-461a-b79a-b936538cb8a8",
	1,
	"f2c7a380-21fe-4c0d-9f05-1bf86680e190",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("2db2d30d-95d2-42b9-8ef2-60b2d9587171",
	"00000000-0000-0000-0000-000000000000",
	'statement_while',
	'',
	'// Render while statement.
statement = param.statement;
s = "";
select one while_statement related by statement->WhileStatement[R5135];
if ( not_empty while_statement )
  s = ::indent(d:param.d) + "while true loop\n";
  select one nested_statement related by while_statement->MaslStatement[R5141];
  if ( not_empty nested_statement )
    s = s + ::statement( statement:nested_statement, d:param.d+1 );
  end if;
  s = s + ::indent(d:param.d) + "end loop;\n";
end if;
return s;',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	0,
	6);
INSERT INTO S_SPARM
	VALUES ("5993ed1d-69ae-4206-88d9-5217c02c808c",
	"2db2d30d-95d2-42b9-8ef2-60b2d9587171",
	'statement',
	"05890c89-f4eb-4163-9007-b5abcf03a719",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("381a0725-6d46-4472-8ef7-b93290411841",
	"2db2d30d-95d2-42b9-8ef2-60b2d9587171",
	'd',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"5993ed1d-69ae-4206-88d9-5217c02c808c",
	'');
INSERT INTO PE_PE
	VALUES ("2db2d30d-95d2-42b9-8ef2-60b2d9587171",
	1,
	"f2c7a380-21fe-4c0d-9f05-1bf86680e190",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("dd95c4b9-dc64-4a4f-a0cc-3e7046030f2c",
	"00000000-0000-0000-0000-000000000000",
	'statement_if',
	'',
	'// Render if statement.
statement = param.statement;
s = "";
select one if_statement related by statement->IfStatement[R5135];
if ( not_empty if_statement )
  select one condition related by if_statement->MaslExpression[R5143];
  s = ::indent( d:param.d ) + "if " + ::expression( expression:condition ) + " then\n";
  select one nested_statement related by if_statement->MaslStatement[R5144];
  if ( not_empty nested_statement )
    s = s + ::statement( statement:nested_statement, d:param.d+1 );
  end if;
  // TODO - support MASL elsif.
  select any alternative related by if_statement->Alternative[R5145];
  if ( not_empty alternative )
    // For ASL, there is no else_if.
    s = s + ::indent( d:param.d ) + "else\n";
    select one nested_statement related by alternative->MaslStatement[R5148];
    if ( not_empty nested_statement )
      s = s + ::statement( statement:nested_statement, d:param.d+1 );
    end if;
  end if;
  s = s + ::indent( d:param.d ) + "end if;\n";
end if;
return s;',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	0,
	7);
INSERT INTO S_SPARM
	VALUES ("e3067891-9aa9-4f44-be60-72d07de4b954",
	"dd95c4b9-dc64-4a4f-a0cc-3e7046030f2c",
	'statement',
	"05890c89-f4eb-4163-9007-b5abcf03a719",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("10705487-3bd8-46a8-bb46-d4c2aabe6c76",
	"dd95c4b9-dc64-4a4f-a0cc-3e7046030f2c",
	'd',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"e3067891-9aa9-4f44-be60-72d07de4b954",
	'');
INSERT INTO PE_PE
	VALUES ("dd95c4b9-dc64-4a4f-a0cc-3e7046030f2c",
	1,
	"f2c7a380-21fe-4c0d-9f05-1bf86680e190",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("acfbc8ee-b3a9-4e71-88a1-f6145b6bf000",
	"00000000-0000-0000-0000-000000000000",
	'statement_case',
	'',
	'// Render case (from switch) statement.
statement = param.statement;
s = "";
select one case_statement related by statement->CaseStatement[R5135];
if ( not_empty case_statement )
  select one discrimination related by case_statement->MaslExpression[R5103];
  s = ::indent(d:param.d) + "case " + ::expression( expression:discrimination ) + " is\n";
  // Find first alternative.
  select any prev_alternative related by case_statement->Alternative[R5146];
  alternative = prev_alternative;
  while ( not_empty prev_alternative )
    alternative = prev_alternative;
    select one prev_alternative related by prev_alternative->Alternative[R5158.''succeeds''];
  end while;
  // Find alternatives and nested statement lists.
  while ( not_empty alternative )
    if ( not alternative.else_otherwise )
      select any alternative_expression related by alternative->AlternativeExpression[R5147];
      select one condition related by alternative_expression->MaslExpression[R5147];
      if ( empty alternative_expression ) or ( empty condition )
        ::trace( i:32, s:"ERROR:  case statement without alternative expression or condition" );
      end if;
      s = s + ::indent( d:param.d+1 ) + "when " + ::expression( expression:condition ) + " =>\n";
      select one nested_statement related by alternative->MaslStatement[R5148];
      s = s + ::indent( d:param.d+2 ) + "begin\n";
      if ( not_empty nested_statement )
        s = s + ::statement( statement:nested_statement, d:param.d+3 );
      end if;
      s = s + ::indent( d:param.d+2 ) + "end;\n";
    else
      s = s + ::indent( d:param.d+1 ) + "otherwise =>\n";
      select one nested_statement related by alternative->MaslStatement[R5148];
      s = s + ::indent( d:param.d+2 ) + "begin\n";
      if ( not_empty nested_statement )
        s = s + ::statement( statement:nested_statement, d:param.d+3 );
      end if;
      s = s + ::indent( d:param.d+2 ) + "end;\n";
    end if;
    select one alternative related by alternative->Alternative[R5158.''precedes''];
  end while;
  s = s + ::indent( d:param.d ) + "end case;\n";
end if;
return s;',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	0,
	8);
INSERT INTO S_SPARM
	VALUES ("d67b4b86-e955-46ed-b28b-07ee145d9092",
	"acfbc8ee-b3a9-4e71-88a1-f6145b6bf000",
	'statement',
	"05890c89-f4eb-4163-9007-b5abcf03a719",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("4d55ad50-b2b9-42ed-8edf-5deb537065ce",
	"acfbc8ee-b3a9-4e71-88a1-f6145b6bf000",
	'd',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"d67b4b86-e955-46ed-b28b-07ee145d9092",
	'');
INSERT INTO PE_PE
	VALUES ("acfbc8ee-b3a9-4e71-88a1-f6145b6bf000",
	1,
	"f2c7a380-21fe-4c0d-9f05-1bf86680e190",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("e399eb02-f482-4b0d-b2fe-c9bae983c292",
	"00000000-0000-0000-0000-000000000000",
	'expression',
	'',
	'// Process an expression.
expression = param.expression;

s = ::expression_variable_name( expression:expression );
if ( "" == s )
s = ::expression_parameter_name( expression:expression );
if ( "" == s )
s = ::expression_binary( expression:expression );
if ( "" == s )
s = ::expression_call( expression:expression );
if ( "" == s )
s = ::expression_literal( expression:expression );
if ( "" == s )
s = ::expression_create( expression:expression );
if ( "" == s )
s = ::expression_find( expression:expression );
if ( "" == s )
s = ::expression_object_name( expression:expression );
if ( "" == s )
s = ::expression_find_attribute_name( expression:expression );
if ( "" == s )
s = ::expression_selected_attribute( expression:expression );
end if;
end if;
end if;
end if;
end if;
end if;
end if;
end if;
end if;
return s;',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	0,
	9);
INSERT INTO S_SPARM
	VALUES ("f8cd4f95-3839-47b8-a21d-109623b37bfd",
	"e399eb02-f482-4b0d-b2fe-c9bae983c292",
	'expression',
	"0f86953a-c0a1-4f83-b7e4-af32c53c2d6d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("0f86953a-c0a1-4f83-b7e4-af32c53c2d6d",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Expression>',
	'',
	'',
	'../../../../../ooamasl/models/ooamasl/ooamasl/expression/expression.xtuml');
INSERT INTO PE_PE
	VALUES ("e399eb02-f482-4b0d-b2fe-c9bae983c292",
	1,
	"f2c7a380-21fe-4c0d-9f05-1bf86680e190",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("20a5c4b8-f8e7-4a5c-a2b7-238872727fcb",
	"00000000-0000-0000-0000-000000000000",
	'expression_variable_name',
	'',
	'expression = param.expression;
select one variable_name_expression related by expression->VariableNameExpression[R5517]->VariableDefinition[R5562];
if ( not_empty variable_name_expression )
  return variable_name_expression.name;
end if;
return "";',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	0,
	10);
INSERT INTO S_SPARM
	VALUES ("a60fdc5f-4c6d-4257-a456-08a143c69ac7",
	"20a5c4b8-f8e7-4a5c-a2b7-238872727fcb",
	'expression',
	"0f86953a-c0a1-4f83-b7e4-af32c53c2d6d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("20a5c4b8-f8e7-4a5c-a2b7-238872727fcb",
	1,
	"f2c7a380-21fe-4c0d-9f05-1bf86680e190",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("399fc8f1-6dcc-4e45-a81a-3bf7edae78e0",
	"00000000-0000-0000-0000-000000000000",
	'expression_parameter_name',
	'',
	'expression = param.expression;
select one parameter_name_expression related by expression->ParameterNameExpression[R5517]->ParameterDefinition[R5536];
if ( not_empty parameter_name_expression )
  return parameter_name_expression.name;
end if;
return "";',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	0,
	11);
INSERT INTO S_SPARM
	VALUES ("552502e4-7e2a-4fbf-88b0-4e9545670aee",
	"399fc8f1-6dcc-4e45-a81a-3bf7edae78e0",
	'expression',
	"0f86953a-c0a1-4f83-b7e4-af32c53c2d6d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("399fc8f1-6dcc-4e45-a81a-3bf7edae78e0",
	1,
	"f2c7a380-21fe-4c0d-9f05-1bf86680e190",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("78f59d41-6ba2-4f09-b8d0-b4973809d230",
	"00000000-0000-0000-0000-000000000000",
	'expression_binary',
	'',
	'expression = param.expression;
select one binary_expression related by expression->BinaryExpression[R5517];
if ( not_empty binary_expression )
  select one lhs related by binary_expression->MaslExpression[R5001];
  select one rhs related by binary_expression->MaslExpression[R5002];
  sl = ::expression( expression:lhs );
  sr = ::expression( expression:rhs );
  return sl + ::operator( op:binary_expression.operator ) + sr;
end if;
return "";',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	0,
	12);
INSERT INTO S_SPARM
	VALUES ("afa0e5c3-2e77-46ab-aeba-ab157c718e95",
	"78f59d41-6ba2-4f09-b8d0-b4973809d230",
	'expression',
	"0f86953a-c0a1-4f83-b7e4-af32c53c2d6d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("78f59d41-6ba2-4f09-b8d0-b4973809d230",
	1,
	"f2c7a380-21fe-4c0d-9f05-1bf86680e190",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("5c3ce1a1-9ac8-435d-a0d5-065991f24f43",
	"00000000-0000-0000-0000-000000000000",
	'operator',
	'',
	's = "UNRECOGNIZED OPERATOR";
if ( param.op == Operator::abs )
  s = "abs";
elif ( param.op == Operator::and_ )
  s = "and";
elif ( param.op == Operator::concatenate )
  s = "&";
elif ( param.op == Operator::disunion )
  s = "disunion";
elif ( param.op == Operator::divide )
  s = "/";
elif ( param.op == Operator::equal )
  s = "=";
elif ( param.op == Operator::greaterthan )
  s = ">";
elif ( param.op == Operator::greaterthanequal )
  s = ">=";
elif ( param.op == Operator::intersection )
  s = "intersection";
elif ( param.op == Operator::lessthan )
  s = "<";
elif ( param.op == Operator::lessthanequal )
  s = "<=";
elif ( param.op == Operator::minus )
  s = "-";
elif ( param.op == Operator::modulo )
  s = "mod";
elif ( param.op == Operator::not )
  s = "not";
elif ( param.op == Operator::notequal )
  s = "/=";
elif ( param.op == Operator::notin )
  s = "not_in";
elif ( param.op == Operator::or_ )
  s = "or";
elif ( param.op == Operator::plus )
  s = "+";
elif ( param.op == Operator::power )
  s = "**";
elif ( param.op == Operator::rem )
  s = "rem";
elif ( param.op == Operator::times )
  s = "*";
elif ( param.op == Operator::unaryminus )
  s = "-";
elif ( param.op == Operator::unaryplus )
  s = "+";
elif ( param.op == Operator::union )
  s = "union";
elif ( param.op == Operator::xor )
  s = "xor";
else
  ::trace( i:50, s:"ERROR:  unrecognized operator" );
end if;
s = " " + s + " ";
return s;',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	0,
	13);
INSERT INTO S_SPARM
	VALUES ("ab31c6cc-3cb1-4f5d-aa85-b4be648e4835",
	"5c3ce1a1-9ac8-435d-a0d5-065991f24f43",
	'op',
	"766b5d8d-2e60-4295-a0c6-de1ee59cb168",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("766b5d8d-2e60-4295-a0c6-de1ee59cb168",
	"00000000-0000-0000-0000-000000000000",
	'Operator',
	'',
	'',
	'../../../../../ooamasl/models/ooamasl/ooamasl/Shared/Shared.xtuml');
INSERT INTO PE_PE
	VALUES ("5c3ce1a1-9ac8-435d-a0d5-065991f24f43",
	1,
	"f2c7a380-21fe-4c0d-9f05-1bf86680e190",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("3c2aa505-e75d-44b4-be62-7786d432091b",
	"00000000-0000-0000-0000-000000000000",
	'expression_literal',
	'',
	'expression = param.expression;
s = "";
select one literal_expression related by expression->LiteralExpression[R5517];
if ( not_empty literal_expression )
  select one boolean_literal related by literal_expression->BooleanLiteral[R5700];
  if ( not_empty boolean_literal )
    if ( boolean_literal.value )
      s = "true";
    else
      s = "false";
    end if;
  else
  select one character_literal related by literal_expression->CharacterLiteral[R5700];
  if ( not_empty character_literal )
    s = character_literal.original;
  else
  select one console_literal related by literal_expression->ConsoleLiteral[R5700];
  if ( not_empty console_literal )
    s = "console";
  else
  select one duration_literal related by literal_expression->DurationLiteral[R5700];
  if ( not_empty duration_literal )
    s = duration_literal.literal;
  else
  select one end_literal related by literal_expression->EndlLiteral[R5700];
  if ( not_empty end_literal )
    s = "end";
  else
  select one enumerate_literal related by literal_expression->EnumerateLiteral[R5700];
  if ( not_empty enumerate_literal )
    select one enumerate_item related by enumerate_literal->EnumerateItem[R5701];
    select any user_defined_type related by enumerate_item->EnumerateType[R6245]->FullTypeDefinition[R6219]->TypeDefinition[R6236]->TypeDeclaration[R6234]->MaslUserDefinedType[R6241];
    if ( not_empty enumerate_item and not_empty user_defined_type )
      s = user_defined_type.name + "." + enumerate_item.name;
    else
      ::trace( i:61, s:"ERROR:  incorrect enumerate literal expression" );
    end if;
  else
  select one null_literal related by literal_expression->NullLiteral[R5700];
  if ( not_empty null_literal )
    s = "null";
  else
  select one numeric_literal related by literal_expression->NumericLiteral[R5700];
  if ( not_empty numeric_literal )
    s = numeric_literal.text;
  else
  select one string_literal related by literal_expression->StringLiteral[R5700];
  if ( not_empty string_literal )
    s = string_literal.original;
  else
  select one this_literal related by literal_expression->ThisLiteral[R5700];
  if ( not_empty this_literal )
    s = "this";
  else
  select one timestamp_literal related by literal_expression->TimestampLiteral[R5700];
  if ( not_empty timestamp_literal )
    s = timestamp_literal.original;
  else
    ::trace( i:60, s:"ERROR:  unrecognized literal expression" );
end if;
end if;
end if;
end if;
end if;
end if;
end if;
end if;
end if;
end if;
end if;
end if;
return s;',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	0,
	14);
INSERT INTO S_SPARM
	VALUES ("811d8388-3a78-44d0-92c0-f1238a3b7e6b",
	"3c2aa505-e75d-44b4-be62-7786d432091b",
	'expression',
	"0f86953a-c0a1-4f83-b7e4-af32c53c2d6d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("3c2aa505-e75d-44b4-be62-7786d432091b",
	1,
	"f2c7a380-21fe-4c0d-9f05-1bf86680e190",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("fbe6f126-d399-4bd0-bf13-cc6766ad25cc",
	"00000000-0000-0000-0000-000000000000",
	'statement_assign',
	'',
	'// Render assign statement.
statement = param.statement;
s = "";
select one assign_statement related by statement->AssignmentStatement[R5135];
if ( not_empty assign_statement )
  s = s + ::indent( d:param.d );
  select one lhs related by assign_statement->MaslExpression[R5101];
  lhs_expression = ::expression( expression:lhs );
  if ( "" != lhs_expression )
    // ASL assigns a void function to an empty sequence.
    s = s + lhs_expression + " := ";
  end if;
  select one rhs related by assign_statement->MaslExpression[R5100];
  s = s + ::expression( expression:rhs ) + ";\n";
end if;
return s;',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	0,
	15);
INSERT INTO S_SPARM
	VALUES ("2f1ec80a-592d-4535-bb89-b878ee73932e",
	"fbe6f126-d399-4bd0-bf13-cc6766ad25cc",
	'statement',
	"05890c89-f4eb-4163-9007-b5abcf03a719",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("239fb804-2ba4-4339-893b-5f2b1d85ea4f",
	"fbe6f126-d399-4bd0-bf13-cc6766ad25cc",
	'd',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"2f1ec80a-592d-4535-bb89-b878ee73932e",
	'');
INSERT INTO PE_PE
	VALUES ("fbe6f126-d399-4bd0-bf13-cc6766ad25cc",
	1,
	"f2c7a380-21fe-4c0d-9f05-1bf86680e190",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("24f777f8-c2ec-4d10-891c-ec0d1478754e",
	"00000000-0000-0000-0000-000000000000",
	'expression_create',
	'',
	'expression = param.expression;
s = "";
select one create_expression related by expression->CreateExpression[R5517];
if ( not_empty create_expression )
  select one object_declaration related by create_expression->ObjectDeclaration[R5511];
  s = "create " + object_declaration.name + "(";
  select many attribute_initializations related by create_expression->AttributeInitialization[R5566];
  args = "";
  delim = "";
  for each attribute_initialization in attribute_initializations
    select one attribute_declaration related by attribute_initialization->AttributeDeclaration[R5565];
    select one initialization related by attribute_initialization->MaslExpression[R5568];
    if ( not_empty attribute_declaration and not_empty initialization )
      args = args + delim + attribute_declaration.name + " => " + ::expression( expression:initialization );
    else
      select one masl_state related by attribute_initialization->MaslState[R5567];
      if ( not_empty masl_state )
        args = args + delim + "Current_State => " + masl_state.name;
      else
        ::trace( i:80, s:"ERROR - expression_create:  incorrect attribute initialization" );
      end if;
    end if;
    delim = ", ";
  end for;
  if ( "" != args )
    s = s + " " + args + " ";
  end if;
  s = s + ")";
end if;
return s;',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	0,
	16);
INSERT INTO S_SPARM
	VALUES ("7cda1d96-ed01-4a56-b97a-197c73c22a28",
	"24f777f8-c2ec-4d10-891c-ec0d1478754e",
	'expression',
	"0f86953a-c0a1-4f83-b7e4-af32c53c2d6d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("24f777f8-c2ec-4d10-891c-ec0d1478754e",
	1,
	"f2c7a380-21fe-4c0d-9f05-1bf86680e190",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("9ee40816-86f3-4d92-8ac2-0b9c54c20a2b",
	"00000000-0000-0000-0000-000000000000",
	'expression_find',
	'',
	'expression = param.expression;
s = "";
select one find_expression related by expression->FindExpression[R5517];
if ( not_empty find_expression )
  if ( find_expression.flavor == FindType::find )
    s = s + "find ";
  elif ( find_expression.flavor == FindType::find_one )
    s = s + "find-one ";
  elif ( find_expression.flavor == FindType::find_only )
    s = s + "find-only ";
  end if;
  select one search_expression related by find_expression->MaslExpression[R5519];
  s = s + ::expression( expression:search_expression ) + "(";
  select one condition related by find_expression->MaslExpression[R5520];
  if ( not_empty condition )
    s = s + " " + ::expression( expression:condition ) + " ";
  end if;
  s = s + ")";
end if;
return s;',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	0,
	17);
INSERT INTO S_SPARM
	VALUES ("867b57b0-ddbd-4c41-950d-bad7e1530c56",
	"9ee40816-86f3-4d92-8ac2-0b9c54c20a2b",
	'expression',
	"0f86953a-c0a1-4f83-b7e4-af32c53c2d6d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("9ee40816-86f3-4d92-8ac2-0b9c54c20a2b",
	1,
	"f2c7a380-21fe-4c0d-9f05-1bf86680e190",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a8c75bfb-6b32-4b4a-878a-6db6cb4a5ef4",
	"00000000-0000-0000-0000-000000000000",
	'expression_object_name',
	'',
	'expression = param.expression;
s = "";
select one object_declaration related by expression->ObjectNameExpression[R5517]->ObjectDeclaration[R5533];
if ( not_empty object_declaration )
  s = object_declaration.name;
end if;
return s;',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	0,
	18);
INSERT INTO S_SPARM
	VALUES ("1c375459-a3fa-49cc-85b7-f342ee67d866",
	"a8c75bfb-6b32-4b4a-878a-6db6cb4a5ef4",
	'expression',
	"0f86953a-c0a1-4f83-b7e4-af32c53c2d6d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("a8c75bfb-6b32-4b4a-878a-6db6cb4a5ef4",
	1,
	"f2c7a380-21fe-4c0d-9f05-1bf86680e190",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("df4dbb16-36b7-4c23-8d63-d26d1fb5e25b",
	"00000000-0000-0000-0000-000000000000",
	'expression_find_attribute_name',
	'',
	'expression = param.expression;
s = "";
select one attribute_declaration related by expression->FindAttributeNameExpression[R5517]->AttributeDeclaration[R5518];
if ( not_empty attribute_declaration )
  s = attribute_declaration.name;
end if;
return s;',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	0,
	19);
INSERT INTO S_SPARM
	VALUES ("38f7a147-4ac0-4eae-b35d-4fd098ed7921",
	"df4dbb16-36b7-4c23-8d63-d26d1fb5e25b",
	'expression',
	"0f86953a-c0a1-4f83-b7e4-af32c53c2d6d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("df4dbb16-36b7-4c23-8d63-d26d1fb5e25b",
	1,
	"f2c7a380-21fe-4c0d-9f05-1bf86680e190",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("016b9f59-a7ba-4d23-b619-c642e8956fca",
	"00000000-0000-0000-0000-000000000000",
	'expression_selected_attribute',
	'',
	'expression = param.expression;
s = "";
select one selected_attribute_expression related by expression->SelectedAttributeExpression[R5517];
if ( not_empty selected_attribute_expression )
  select one root_expression related by selected_attribute_expression->MaslExpression[R5569];
  s = s + ::expression( expression:root_expression );
  select one attribute_declaration related by selected_attribute_expression->AttributeDeclaration[R5541];
  s = s + "." + attribute_declaration.name;
end if;
return s;',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	0,
	20);
INSERT INTO S_SPARM
	VALUES ("16b44b9c-50b7-4711-b215-5dda81e74bad",
	"016b9f59-a7ba-4d23-b619-c642e8956fca",
	'expression',
	"0f86953a-c0a1-4f83-b7e4-af32c53c2d6d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("016b9f59-a7ba-4d23-b619-c642e8956fca",
	1,
	"f2c7a380-21fe-4c0d-9f05-1bf86680e190",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("c982f811-ca0a-4991-81ae-206cdd6f30af",
	"00000000-0000-0000-0000-000000000000",
	'service_signature',
	'',
	's = "";
service = param.service;
s = s + service.description;
if ( MaslVisibility::private == service.visibility )
  s = s + "private ";
elif ( MaslVisibility::public == service.visibility )
  s = s + "public ";
else
  ::trace( i:110, s:"ERROR - invalid service visibility" );
end if;
select one domain related by service->DomainService[R5203]->Domain[R5303];
if ( not_empty domain )
  s = s + "service " + domain.name + "::" + service.name + " (";
else
  select one domain_terminator related by service->DomainTerminatorService[R5203]->DomainTerminator[R5306];
  if ( not_empty domain_terminator )
    select one domain related by domain_terminator->Domain[R5304];
    s = s + "service " + domain.name + "::" + domain_terminator.name + "~>" + service.name + " (";
  else
    select one object_service related by service->ObjectService[R5203];
    if ( not_empty object_service )
      select one object_declaration related by object_service->ObjectDeclaration[R5808];
      instance_based = "";
      if ( object_service.isInstance )
        instance_based = "instance ";
      end if;
      select one domain related by object_declaration->Domain[R5805];
      s = s + "service " + instance_based + domain.name + "::" + object_declaration.name + "." + service.name + " (";
    end if;
  end if;
end if;
select one parameter_definition related by service->ParameterDefinition[R5204];
if ( not_empty parameter_definition )
  s = s + ::parameter_definition_render( parameter_definition:parameter_definition );
end if;
s = s + " )";
select one basic_type related by service->BasicType[R5205];
if ( not_empty basic_type )
  s = s + " return " + ::basic_type_render( basic_type:basic_type );
end if;
s = s + " is\n";
return s;',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	0,
	21);
INSERT INTO S_SPARM
	VALUES ("d0806887-27b3-4d5b-8808-c6bafcf1b5c4",
	"c982f811-ca0a-4991-81ae-206cdd6f30af",
	'service',
	"b907c2e2-2877-4506-8018-ad38c7be275a",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("b907c2e2-2877-4506-8018-ad38c7be275a",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Service>',
	'',
	'',
	'../../../../../ooamasl/models/ooamasl/ooamasl/domain/domain.xtuml');
INSERT INTO PE_PE
	VALUES ("c982f811-ca0a-4991-81ae-206cdd6f30af",
	1,
	"f2c7a380-21fe-4c0d-9f05-1bf86680e190",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("d60ab3b9-cadf-4016-bfba-218acf6eb7ee",
	"00000000-0000-0000-0000-000000000000",
	'basic_type_render',
	'',
	'basic_type = param.basic_type;
s = "";
select one user_defined_type related by basic_type->MaslUserDefinedType[R6205];
if ( not_empty user_defined_type )
  s = s + user_defined_type.name;
else
select one instance_type related by basic_type->InstanceType[R6205];
if ( not_empty instance_type )
  s = s + "instance of ...";
else
select one collection_type related by basic_type->CollectionType[R6205];
if ( not_empty collection_type )
  s = s + "collection of ...";
else
select one builtin_type related by basic_type->BuiltinType[R6205];
if ( not_empty builtin_type )
  s = s + builtin_type.name;
else
select one internal_type related by basic_type->InternalType[R6205];
if ( not_empty internal_type )
  s = s + "internal_" + internal_type.name;
else
select any udt related by basic_type->TypeDefinition[R6236]->TypeDeclaration[R6234]->MaslUserDefinedType[R6241];
if ( not_empty udt )
  s = s + "udtup_" + udt.name;
end if;
end if;
end if;
end if;
end if;
end if;
return s;',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	0,
	22);
INSERT INTO S_SPARM
	VALUES ("c0b707f5-8283-4d55-b086-ca6c1b24d7c7",
	"d60ab3b9-cadf-4016-bfba-218acf6eb7ee",
	'basic_type',
	"f2470f88-fc4a-406d-ba1c-54179e448ed4",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("f2470f88-fc4a-406d-ba1c-54179e448ed4",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<BasicType>',
	'',
	'',
	'../../../../../ooamasl/models/ooamasl/ooamasl/type/type.xtuml');
INSERT INTO PE_PE
	VALUES ("d60ab3b9-cadf-4016-bfba-218acf6eb7ee",
	1,
	"f2c7a380-21fe-4c0d-9f05-1bf86680e190",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("aa121b82-7448-44f9-b879-da808c231280",
	"00000000-0000-0000-0000-000000000000",
	'parameter_definition_render',
	'',
	'parameter_definition = param.parameter_definition;
s = "\n" + ::indent( d:1 ) + parameter_definition.name + ": ";
if ( ParameterMode::in == parameter_definition.mode )
  s = s + "in ";
elif ( ParameterMode::out == parameter_definition.mode )
  s = s + "out ";
else
  ::trace( i:111, s:"ERROR - incorrect parameter mode for:  " + parameter_definition.name );
end if;
select one basic_type related by parameter_definition->BasicType[R5200];
s = s + ::basic_type_render( basic_type:basic_type );
select one parameter_definition related by parameter_definition->ParameterDefinition[R5208.''precedes''];
if ( not_empty parameter_definition )
  s = s + ", " + ::parameter_definition_render( parameter_definition:parameter_definition );
end if;
return s;',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	0,
	23);
INSERT INTO S_SPARM
	VALUES ("8fa3ccc7-1832-4efb-a90a-8e15a86f32ff",
	"aa121b82-7448-44f9-b879-da808c231280",
	'parameter_definition',
	"f4d42a8f-58ea-4bca-ac49-ea1239d45a52",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("f4d42a8f-58ea-4bca-ac49-ea1239d45a52",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<ParameterDefinition>',
	'',
	'',
	'../../../../../ooamasl/models/ooamasl/ooamasl/domain/domain.xtuml');
INSERT INTO PE_PE
	VALUES ("aa121b82-7448-44f9-b879-da808c231280",
	1,
	"f2c7a380-21fe-4c0d-9f05-1bf86680e190",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("2a725f5e-9939-452a-ac6e-2496ef73425a",
	"00000000-0000-0000-0000-000000000000",
	'service',
	'',
	'service = param.service;
s = ::service_signature( service:service );
// Declare the local variables.
select one code_block related by service->MaslCodeBlock[R5403];
s = s + ::locals( code_block:code_block );
s = s + "begin\n";
select one statement related by service->MaslCodeBlock[R5403]->MaslStatement[R5150];
if ( not_empty statement )
  s = s + ::statement( statement:statement, d:1 );
  ::trace( i:1, s:s );
else
  s = s + "  null;\n";
end if;
s = s + "end service;\n";
return s;',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	0,
	24);
INSERT INTO S_SPARM
	VALUES ("103bc4c1-aa74-4515-acb9-5001dee47c5f",
	"2a725f5e-9939-452a-ac6e-2496ef73425a",
	'service',
	"b907c2e2-2877-4506-8018-ad38c7be275a",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("2a725f5e-9939-452a-ac6e-2496ef73425a",
	1,
	"f2c7a380-21fe-4c0d-9f05-1bf86680e190",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("5eab76e8-5636-4795-8e4a-b70bfbfe480b",
	"00000000-0000-0000-0000-000000000000",
	'state_action',
	'',
	's = "";
state = param.state;
s = s + state.description;
select one object_declaration related by state->ObjectDeclaration[R6105];
select one domain related by object_declaration->Domain[R5805];
s = s + "state " + domain.name + "::" + object_declaration.name + "." + state.name + " (";
select one parameter_definition related by state->ParameterDefinition[R6104];
if ( not_empty parameter_definition )
  s = s + ::parameter_definition_render( parameter_definition:parameter_definition );
end if;
s = s + ") is\n";
// Declare the local variables.
select one code_block related by state->MaslCodeBlock[R6115];
s = s + ::locals( code_block:code_block );
s = s + "begin\n";
select one statement related by code_block->MaslStatement[R5150];
if ( not_empty statement )
  s = s + ::statement( statement:statement, d:1 );
  ::trace( i:1, s:s );
else
  s = s + "  null;\n";
end if;
s = s + "end state;\n";
return s;

',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	0,
	25);
INSERT INTO S_SPARM
	VALUES ("2c448c7f-4443-4e52-b1d5-cec8b532bec1",
	"5eab76e8-5636-4795-8e4a-b70bfbfe480b",
	'state',
	"640e9a30-074e-45fd-aa2b-fdcc3fc56f5b",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("640e9a30-074e-45fd-aa2b-fdcc3fc56f5b",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<State>',
	'',
	'',
	'../../../../../ooamasl/models/ooamasl/ooamasl/statemodel/statemodel.xtuml');
INSERT INTO PE_PE
	VALUES ("5eab76e8-5636-4795-8e4a-b70bfbfe480b",
	1,
	"f2c7a380-21fe-4c0d-9f05-1bf86680e190",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("23e5314b-472d-4310-986a-88073453afc1",
	"00000000-0000-0000-0000-000000000000",
	'expression_call',
	'',
	'expression = param.expression;
s = "";
select one call_expression related by expression->CallExpression[R5517];
if ( not_empty call_expression )
  select one service_invocation related by call_expression->ServiceInvocation[R5500];
  // several subtypes of service invocation
  select one terminator_service_invocation related by service_invocation->TerminatorServiceInvocation[R5610];
  select one domain_service_invocation related by service_invocation->DomainServiceInvocation[R5610];
  select one object_service_invocation related by service_invocation->ObjectServiceInvocation[R5610];
  select one instance_service_invocation related by service_invocation->InstanceServiceInvocation[R5610];
  if ( not_empty domain_service_invocation )
    select one domain related by domain_service_invocation->DomainService[R5611]->Domain[R5303];
    select one service related by domain_service_invocation->DomainService[R5611]->Service[R5203];
    s = s + domain.name + "::" + service.name + "(";
  elif ( not_empty terminator_service_invocation )
    select one terminator related by terminator_service_invocation->DomainTerminatorService[R5612]->DomainTerminator[R5306];
    select one service related by terminator_service_invocation->DomainTerminatorService[R5612]->Service[R5203];
    s = s + terminator.name + "~>" + service.name + "(";
  elif ( not_empty object_service_invocation )
    select one object_declaration related by object_service_invocation->ObjectService[R5613]->ObjectDeclaration[R5808];
    select one service related by object_service_invocation->ObjectService[R5613]->Service[R5203];
    s = s + object_declaration.name + "." + service.name + "(";
  elif ( not_empty instance_service_invocation )
    select one object_declaration related by instance_service_invocation->ObjectService[R5614]->ObjectDeclaration[R5808];
    select one service related by instance_service_invocation->ObjectService[R5614]->Service[R5203];
    s = s + object_declaration.name + "." + service.name + "(";
  else
    ::trace( i:75, s:"ERROR:  malformed call expression" );
  end if;
  args = "";
  delim = "";
  select one argument related by call_expression->Argument[R5575];
  while ( not_empty argument )
    select one argument_expression related by argument->MaslExpression[R5577];
    args = args + delim + ::expression( expression:argument_expression );
    delim = ", ";
    select one argument related by argument->Argument[R5576.''precedes''];
  end while;
  if ( "" != args )
    s = s + " " + args + " ";
  end if;
  s = s + ")";
end if;
return s;',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	0,
	26);
INSERT INTO S_SPARM
	VALUES ("0b4f54a5-8de0-401e-90f0-9b0adc4c44ed",
	"23e5314b-472d-4310-986a-88073453afc1",
	'expression',
	"0f86953a-c0a1-4f83-b7e4-af32c53c2d6d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("23e5314b-472d-4310-986a-88073453afc1",
	1,
	"f2c7a380-21fe-4c0d-9f05-1bf86680e190",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("d6c8ba39-13e2-40ff-a061-48d9d964ac8e",
	"00000000-0000-0000-0000-000000000000",
	'statement_link_unlink',
	'',
	'// Render link/unlink statement.
statement = param.statement;
s = "";
select one link_statement related by statement->LinkUnlinkStatement[R5135];
if ( not_empty link_statement )
  s = s + ::indent( d:param.d );
  if ( link_statement.isLink )
    s = s + "link ";
  else
    s = s + "unlink ";
  end if;
  select one rel_spec related by link_statement->RelationshipSpecification[R5120];
  select one relationship_declaration related by rel_spec->RelationshipDeclaration[R6015];
  select one subtype_relationship related by relationship_declaration->SubtypeRelationshipDeclaration[R6010];
  select one lhs_expression related by link_statement->MaslExpression[R5122];
  select one rhs_expression related by link_statement->MaslExpression[R5119];
  select one using_expression related by link_statement->MaslExpression[R5121];
  s = s + ::expression( expression:lhs_expression );
  s = s + " " + relationship_declaration.name;
  // Skip the role phrase for super/subs.
  if ( empty subtype_relationship )
    s = s + "." + rel_spec.role;
  end if;
  s = s + " " + ::expression( expression:rhs_expression );
  if ( not_empty using_expression )
    s = s + " using " + ::expression( expression:using_expression );
  end if;
  s = s + ";\n";
end if;
return s;',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	0,
	27);
INSERT INTO S_SPARM
	VALUES ("7983154c-6961-4dce-b8dd-b52733c6dc38",
	"d6c8ba39-13e2-40ff-a061-48d9d964ac8e",
	'statement',
	"05890c89-f4eb-4163-9007-b5abcf03a719",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("eae28b0b-0f99-4939-8760-7421e701b573",
	"d6c8ba39-13e2-40ff-a061-48d9d964ac8e",
	'd',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"7983154c-6961-4dce-b8dd-b52733c6dc38",
	'');
INSERT INTO PE_PE
	VALUES ("d6c8ba39-13e2-40ff-a061-48d9d964ac8e",
	1,
	"f2c7a380-21fe-4c0d-9f05-1bf86680e190",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("d598af76-b7f8-4281-939a-b9458c7dc1a2",
	"00000000-0000-0000-0000-000000000000",
	'statement_exit',
	'',
	'// Render exit (break) statement.
statement = param.statement;
s = "";
select one exit_statement related by statement->ExitStatement[R5135];
if ( not_empty exit_statement )
  s = ::indent(d:param.d) + "exit ";
  select one condition related by exit_statement->MaslExpression[R5109];
  if ( not_empty condition )
    s = s + "when " + ::expression( expression:condition );
  end if;
  s = s + ";\n";
end if;
return s;',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	0,
	28);
INSERT INTO S_SPARM
	VALUES ("70b2ce09-0e27-423f-816d-12a9196955a1",
	"d598af76-b7f8-4281-939a-b9458c7dc1a2",
	'statement',
	"05890c89-f4eb-4163-9007-b5abcf03a719",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("7193b3e1-5ea8-4a96-81e4-a80352e17fac",
	"d598af76-b7f8-4281-939a-b9458c7dc1a2",
	'd',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"70b2ce09-0e27-423f-816d-12a9196955a1",
	'');
INSERT INTO PE_PE
	VALUES ("d598af76-b7f8-4281-939a-b9458c7dc1a2",
	1,
	"f2c7a380-21fe-4c0d-9f05-1bf86680e190",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("106f243f-672f-4a47-beba-21c897b3c256",
	"00000000-0000-0000-0000-000000000000",
	'statement_delete',
	'',
	'// Render delete statement.
statement = param.statement;
s = "";
select one delete_statement related by statement->DeleteStatement[R5135];
if ( not_empty delete_statement )
  select one expression related by delete_statement->MaslExpression[R5105];
  s = s + ::indent(d:param.d) + "delete " + ::expression( expression:expression ) + ";\n";
end if;
return s;',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	0,
	29);
INSERT INTO S_SPARM
	VALUES ("7ef72dbb-a04c-446f-8b67-7b2cbfebbfba",
	"106f243f-672f-4a47-beba-21c897b3c256",
	'statement',
	"05890c89-f4eb-4163-9007-b5abcf03a719",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("af5f85cd-b6c6-4474-aec4-6998c9ea336a",
	"106f243f-672f-4a47-beba-21c897b3c256",
	'd',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"7ef72dbb-a04c-446f-8b67-7b2cbfebbfba",
	'');
INSERT INTO PE_PE
	VALUES ("106f243f-672f-4a47-beba-21c897b3c256",
	1,
	"f2c7a380-21fe-4c0d-9f05-1bf86680e190",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("4eeab108-2cb7-40dd-8c89-c6bd96efc9c4",
	"00000000-0000-0000-0000-000000000000",
	'statement_generate',
	'',
	'// Render generate statement.
statement = param.statement;
s = "";
select one generate_statement related by statement->GenerateStatement[R5135];
if ( not_empty generate_statement )
  select one event_declaration related by generate_statement->EventDeclaration[R5112];
  select one object_declaration related by event_declaration->ObjectDeclaration[R6101];
  s = s + ::indent(d:param.d) + "generate " + object_declaration.name + "." + event_declaration.name + "(";
  args = "";
  delim = "";
  select one argument related by generate_statement->Argument[R5114];
  while ( not_empty argument )
    select one argument_expression related by argument->MaslExpression[R5577];
    args = args + delim + ::expression( expression:argument_expression );
    delim = ", ";
    select one argument related by argument->Argument[R5576.''precedes''];
  end while;
  if ( "" != args )
    s = s + " " + args + " ";
  end if;
  s = s + ")";
  select one target_instance related by generate_statement->MaslExpression[R5113];
  if ( not_empty target_instance )
    s = s + " to " + ::expression( expression:target_instance );
  else
    ::trace( i:911, s:"GENERATE without target instance" );
  end if;
  s = s + ";\n";
end if;
return s;',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	0,
	30);
INSERT INTO S_SPARM
	VALUES ("70709e82-9bc9-4194-9047-082fba2426af",
	"4eeab108-2cb7-40dd-8c89-c6bd96efc9c4",
	'statement',
	"05890c89-f4eb-4163-9007-b5abcf03a719",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("5ff34453-cafd-4517-838f-5feda1f2fe9b",
	"4eeab108-2cb7-40dd-8c89-c6bd96efc9c4",
	'd',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"70709e82-9bc9-4194-9047-082fba2426af",
	'');
INSERT INTO PE_PE
	VALUES ("4eeab108-2cb7-40dd-8c89-c6bd96efc9c4",
	1,
	"f2c7a380-21fe-4c0d-9f05-1bf86680e190",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("84b65847-7cb3-4e35-99f2-800c069f81b2",
	"00000000-0000-0000-0000-000000000000",
	'statement_comment',
	'',
	'// Render line comment.
statement = param.statement;
s = "";
select one comment related by statement->Comment[R5135];
if ( not_empty comment )
  s = ::indent(d:param.d) + "//" + STRING::substr(s:comment.text, begin:1, end:-1);
  s = s + "\n";
end if;
return s;',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	0,
	31);
INSERT INTO S_SPARM
	VALUES ("05f1a247-303c-49c1-a581-b7e314355a58",
	"84b65847-7cb3-4e35-99f2-800c069f81b2",
	'd',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"e102b8d0-7380-4924-b4fb-ca181c69a247",
	'');
INSERT INTO S_SPARM
	VALUES ("e102b8d0-7380-4924-b4fb-ca181c69a247",
	"84b65847-7cb3-4e35-99f2-800c069f81b2",
	'statement',
	"05890c89-f4eb-4163-9007-b5abcf03a719",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("84b65847-7cb3-4e35-99f2-800c069f81b2",
	1,
	"f2c7a380-21fe-4c0d-9f05-1bf86680e190",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO PE_PE
	VALUES ("f2c7a380-21fe-4c0d-9f05-1bf86680e190",
	1,
	"fa715298-1ee7-4f4d-9dc6-ff741962c501",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO EP_PKG_PROXY
	VALUES ("fa715298-1ee7-4f4d-9dc6-ff741962c501",
	"e1ca632b-b51d-48ee-b1a8-9539fcd49828",
	"e1ca632b-b51d-48ee-b1a8-9539fcd49828",
	'load',
	'',
	0,
	'../load.xtuml');
INSERT INTO S_SYS_PROXY
	VALUES ("e1ca632b-b51d-48ee-b1a8-9539fcd49828",
	'stratus',
	1,
	'../../stratus.xtuml');
